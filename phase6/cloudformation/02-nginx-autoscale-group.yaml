AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  DefaultSecurityGroupId:
    Description: ID of default security group in your VPC
    Type: String

Resources:
  IAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: nginx-role-asg
      Description: "IAM Role applied to web servers"
      MaxSessionDuration: 3600
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: Allow-S3-Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "s3:*"
                Resource: 
                  - "arn:aws:s3:::drupal-govcon-2021-assets"
                  - "arn:aws:s3:::drupal-govcon-2021-assets/*"
                  - "arn:aws:s3:::drupal-govcon-2021"
                  - "arn:aws:s3:::drupal-govcon-2021/*"

  IAMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: nginx-role-asg
      Path: "/"
      Roles:
        - Ref: "IAMRole"

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow web access to Application Load Balancer
      VpcId: vpc-709cea0d

  WebSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: WebSecurityGroup
    Properties:
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 80
      ToPort: 80
      GroupId: !GetAtt WebSecurityGroup.GroupId
      Description: Allow ingress on port 80

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ALB Access to EC2 Instance
      VpcId: vpc-709cea0d

  ALBSecurityGroupGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: WebSecurityGroup
    Properties:
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ALBSecurityGroup
      FromPort: 80
      ToPort: 80
      GroupId: !GetAtt ALBSecurityGroup.GroupId
      Description: Allow ingress on port 80

  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: "alb-nginx"
      Scheme: "internet-facing"
      SecurityGroups: 
        - !Ref WebSecurityGroup
        - !Ref ALBSecurityGroup
      Subnets:
        - subnet-1d426442
        - subnet-1be81d57
      Type: "application"

  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: [ LoadBalancer ]
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerTargetGroup
          Type: "forward"

  LoadBalancerTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: tg-nginx
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 25
      HealthCheckPath: "/nc.html"
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: deregistration_delay.timeout_seconds
          Value: 300
      Port: 80
      Protocol: HTTP
      VpcId: vpc-709cea0d

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            DeleteOnTermination: true
      EbsOptimized: true
      IamInstanceProfile: !Ref IAMRole
      ImageId: ami-087c17d1fe0178315
      InstanceType: t3.small
      KeyName: cloud9
      SecurityGroups: 
        - !Ref ALBSecurityGroup
        - !Ref DefaultSecurityGroupId
      UserData: 
        !Base64 |
          #!/bin/sh -xe
          yum update -y && yum install -y docker git

          # Install docker-compose and setup docker
          service docker start
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          usermod -aG docker ec2-user
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # Setup app folder structure
          mkdir /var/app -p
          chown 1000:1000 /var/app
          
          # clone repo
          sudo -u "#1000" git clone https://github.com/mobomo/drupal-govcon-2021-training.git /var/app

          # download .env file
          aws s3 cp s3://drupal-govcon-2021/phase5.env /var/app/phase6/.env

          # Export environment variables
          set -a && source /var/app/phase6/.env && set +a

          # start nginx volume mounting configuration file from phase 5
          cd /var/app/phase6

          # start container
          docker-compose up -d

  AutoscaleGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      MinSize: 2
      MaxSize: 3
      DesiredCapacity: 2
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref LaunchConfig
      VPCZoneIdentifier: 
        - subnet-1d426442
        - subnet-1be81d57
      TargetGroupARNs: [ !Ref LoadBalancerTargetGroup ]
      Tags:
        - Key: Name
          Value: "Phase 6 Nginx App"
          PropagateAtLaunch: true

  PrivateCMSDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : Z0038490QWCFHKK094DG
      Name: nginx-asg.app.local
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName
      TTL: 60
      Type: CNAME

Outputs:
  ALBDNSValue:
    Description: "ALB DNS Name"
    Value: !GetAtt [LoadBalancer, DNSName]